find.package("devtools")
install.packages("devtools")
library(devtools)
find(Rtools)
find rtools()
find_rtools()
library(devtools)
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
setwd(paste("C:/Coursera/RProg/Assignment1","/",directory,sep=''))
files_full <- list.files(,full.names=TRUE)
dat <- data.frame()
for (i in id) {
dat <- rbind(dat, read.csv(files_full[i]))
}
completeRow<-complete.cases(dat) ## complete.cases creates a logical vector (T,F) for row with all data complete
completeDat<-dat[completeRow, ]##[1:4, ]
}
q()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x<-5
y<- if(x<3) {}
x<-5
Y<- if (x<3){NA} else {10}
y
Y
q()
q()
q()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x <- 1:10
xx <- makeVector(x)
xx$get()
xx$getmean()
xx$setmean(mean(x))
xx$getmean()
xx$setmean("Hi, I am a mean")
xx$getmean()
x
xx
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
x<-matrix( c(2, 4, 3, 1, 5, 7))
x<-matrix( c(2, 4, 3, 1, 5, 7), nrow=3, ncol=2)
x
xx <- makeCacheMatrix(x)
xx$get()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
x<-matrix( c(2, 4, 3, 1, 5, 7), nrow=3, ncol=2)
xx <- makeCacheMatrix(x)
xx$get()
xx$getinverse()
xx$setmean(solve(x))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
x<-matrix( c(2, 4, 3, 1, 5, 7), nrow=3, ncol=2)
xx<- makeCacheMatrix(x)
xx$get()
xx$setinverse()
xx$getinverse()
xx$setinverse(solve(x))
x<-matrix( c(2, 4, 3, 1, 5, 7, 11, 4, 7), nrow=3, ncol=3)
x
xx<- makeCacheMatrix(x)
xx$get()
xx$getinverse()
xx$setinverse(solve(x))
xx$getinverse()
q()
getwd()
setwd("C:/BROWNSTILL-HP/Users/BROWNSTILL/ProgrammingAssignment2")
setwd("//BROWNSTILL-HP/Users/BROWNSTILL/ProgrammingAssignment2")
getwd()
source("cachematrix.R")
size <- 1000
mymatrix <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse <- solve(mymatrix)
special.matrix   <- makeCacheMatrix(mymatrix)
special.solved.1 <- cacheSolve(special.matrix)
special.solved.2 <- cacheSolve(special.matrix)
identical(mymatrix.inverse, special.solved.1) & identical(mymatrix.inverse, special.solved.2)
q()
